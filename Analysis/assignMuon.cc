	Int_t idx = 0 ;
 	storageArray[ offset + candidateMap["b5_MuonId_chi2LocalPosition"]] = ntupleRawTree.b5_MuonId_chi2LocalPosition[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_glbNormChi2"]] = ntupleRawTree.b5_MuonId_glbNormChi2[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_glbTrackProbability"]] = ntupleRawTree.b5_MuonId_glbTrackProbability[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_dX"]] = ntupleRawTree.b5_MuonId_match1_dX[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_dY"]] = ntupleRawTree.b5_MuonId_match1_dY[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_pullDxDz"]] = ntupleRawTree.b5_MuonId_match1_pullDxDz[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_pullDyDz"]] = ntupleRawTree.b5_MuonId_match1_pullDyDz[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_pullX"]] = ntupleRawTree.b5_MuonId_match1_pullX[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match1_pullY"]] = ntupleRawTree.b5_MuonId_match1_pullY[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_dX"]] = ntupleRawTree.b5_MuonId_match2_dX[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_dY"]] = ntupleRawTree.b5_MuonId_match2_dY[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_pullDxDz"]] = ntupleRawTree.b5_MuonId_match2_pullDxDz[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_pullDyDz"]] = ntupleRawTree.b5_MuonId_match2_pullDyDz[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_pullX"]] = ntupleRawTree.b5_MuonId_match2_pullX[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_match2_pullY"]] = ntupleRawTree.b5_MuonId_match2_pullY[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_newSoftMuonMva"]] = ntupleRawTree.b5_MuonId_newSoftMuonMva[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkKink"]] = ntupleRawTree.b5_MuonId_trkKink[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkValidFrac"]] = ntupleRawTree.b5_MuonId_trkValidFrac[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_highPurity"]] = ntupleRawTree.b5_MuonId_highPurity[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_nLostHitsInner"]] = ntupleRawTree.b5_MuonId_nLostHitsInner[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_nLostHitsOn"]] = ntupleRawTree.b5_MuonId_nLostHitsOn[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_nLostHitsOuter"]] = ntupleRawTree.b5_MuonId_nLostHitsOuter[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_nPixels"]] = ntupleRawTree.b5_MuonId_nPixels[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_nValidHits"]] = ntupleRawTree.b5_MuonId_nValidHits[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkLayers"]] = ntupleRawTree.b5_MuonId_trkLayers[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkLostLayersInner"]] = ntupleRawTree.b5_MuonId_trkLostLayersInner[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkLostLayersOn"]] = ntupleRawTree.b5_MuonId_trkLostLayersOn[candIdx] ; 
	storageArray[ offset + candidateMap["b5_MuonId_trkLostLayersOuter"]] = ntupleRawTree.b5_MuonId_trkLostLayersOuter[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_dxy"]] = ntupleRawTree.b5_Muon_dxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_dxyErr"]] = ntupleRawTree.b5_Muon_dxyErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_dxybs"]] = ntupleRawTree.b5_Muon_dxybs[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_dz"]] = ntupleRawTree.b5_Muon_dz[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_dzErr"]] = ntupleRawTree.b5_Muon_dzErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_eta"]] = ntupleRawTree.b5_Muon_eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_ip3d"]] = ntupleRawTree.b5_Muon_ip3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_jetPtRelv2"]] = ntupleRawTree.b5_Muon_jetPtRelv2[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_jetRelIso"]] = ntupleRawTree.b5_Muon_jetRelIso[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mass"]] = ntupleRawTree.b5_Muon_mass[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_miniPFRelIso_all"]] = ntupleRawTree.b5_Muon_miniPFRelIso_all[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_miniPFRelIso_chg"]] = ntupleRawTree.b5_Muon_miniPFRelIso_chg[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pfRelIso03_all"]] = ntupleRawTree.b5_Muon_pfRelIso03_all[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pfRelIso03_chg"]] = ntupleRawTree.b5_Muon_pfRelIso03_chg[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pfRelIso04_all"]] = ntupleRawTree.b5_Muon_pfRelIso04_all[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_phi"]] = ntupleRawTree.b5_Muon_phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pt"]] = ntupleRawTree.b5_Muon_pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_ptErr"]] = ntupleRawTree.b5_Muon_ptErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_segmentComp"]] = ntupleRawTree.b5_Muon_segmentComp[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_sip3d"]] = ntupleRawTree.b5_Muon_sip3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_softMva"]] = ntupleRawTree.b5_Muon_softMva[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_tkRelIso"]] = ntupleRawTree.b5_Muon_tkRelIso[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_tunepRelPt"]] = ntupleRawTree.b5_Muon_tunepRelPt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mvaLowPt"]] = ntupleRawTree.b5_Muon_mvaLowPt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mvaTTH"]] = ntupleRawTree.b5_Muon_mvaTTH[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_charge"]] = ntupleRawTree.b5_Muon_charge[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_jetIdx"]] = ntupleRawTree.b5_Muon_jetIdx[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_nStations"]] = ntupleRawTree.b5_Muon_nStations[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_nTrackerLayers"]] = ntupleRawTree.b5_Muon_nTrackerLayers[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pdgId"]] = ntupleRawTree.b5_Muon_pdgId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_tightCharge"]] = ntupleRawTree.b5_Muon_tightCharge[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_fsrPhotonIdx"]] = ntupleRawTree.b5_Muon_fsrPhotonIdx[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_highPtId"]] = ntupleRawTree.b5_Muon_highPtId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_highPurity"]] = ntupleRawTree.b5_Muon_highPurity[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_inTimeMuon"]] = ntupleRawTree.b5_Muon_inTimeMuon[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_isGlobal"]] = ntupleRawTree.b5_Muon_isGlobal[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_isPFcand"]] = ntupleRawTree.b5_Muon_isPFcand[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_isTracker"]] = ntupleRawTree.b5_Muon_isTracker[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_jetNDauCharged"]] = ntupleRawTree.b5_Muon_jetNDauCharged[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_looseId"]] = ntupleRawTree.b5_Muon_looseId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mediumId"]] = ntupleRawTree.b5_Muon_mediumId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mediumPromptId"]] = ntupleRawTree.b5_Muon_mediumPromptId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_miniIsoId"]] = ntupleRawTree.b5_Muon_miniIsoId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_multiIsoId"]] = ntupleRawTree.b5_Muon_multiIsoId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mvaId"]] = ntupleRawTree.b5_Muon_mvaId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_mvaLowPtId"]] = ntupleRawTree.b5_Muon_mvaLowPtId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_pfIsoId"]] = ntupleRawTree.b5_Muon_pfIsoId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_softId"]] = ntupleRawTree.b5_Muon_softId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_softMvaId"]] = ntupleRawTree.b5_Muon_softMvaId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_tightId"]] = ntupleRawTree.b5_Muon_tightId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_tkIsoId"]] = ntupleRawTree.b5_Muon_tkIsoId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_Muon_triggerIdLoose"]] = ntupleRawTree.b5_Muon_triggerIdLoose[candIdx] ; 
