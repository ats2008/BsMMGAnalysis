	Int_t idx = 0 ;
 	storageArray[ offset + candidateMap["b5_mm_kal_slxy"]] = ntupleRawTree.b5_mm_kal_slxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kal_vtx_prob"]] = ntupleRawTree.b5_mm_kal_vtx_prob[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_alpha"]] = ntupleRawTree.b5_mm_kin_alpha[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_eta"]] = ntupleRawTree.b5_mm_kin_eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_l3d"]] = ntupleRawTree.b5_mm_kin_l3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_lxy"]] = ntupleRawTree.b5_mm_kin_lxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mass"]] = ntupleRawTree.b5_mm_kin_mass[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_massErr"]] = ntupleRawTree.b5_mm_kin_massErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu1eta"]] = ntupleRawTree.b5_mm_kin_mu1eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu1phi"]] = ntupleRawTree.b5_mm_kin_mu1phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu1pt"]] = ntupleRawTree.b5_mm_kin_mu1pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu2eta"]] = ntupleRawTree.b5_mm_kin_mu2eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu2phi"]] = ntupleRawTree.b5_mm_kin_mu2phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_mu2pt"]] = ntupleRawTree.b5_mm_kin_mu2pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_phi"]] = ntupleRawTree.b5_mm_kin_phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pt"]] = ntupleRawTree.b5_mm_kin_pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv2ip"]] = ntupleRawTree.b5_mm_kin_pv2ip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv2ipErr"]] = ntupleRawTree.b5_mm_kin_pv2ipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv2lip"]] = ntupleRawTree.b5_mm_kin_pv2lip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv2lipErr"]] = ntupleRawTree.b5_mm_kin_pv2lipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv2lipSig"]] = ntupleRawTree.b5_mm_kin_pv2lipSig[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv_z"]] = ntupleRawTree.b5_mm_kin_pv_z[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pv_zErr"]] = ntupleRawTree.b5_mm_kin_pv_zErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pvip"]] = ntupleRawTree.b5_mm_kin_pvip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pvipErr"]] = ntupleRawTree.b5_mm_kin_pvipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pvlip"]] = ntupleRawTree.b5_mm_kin_pvlip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pvlipErr"]] = ntupleRawTree.b5_mm_kin_pvlipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_pvlipSig"]] = ntupleRawTree.b5_mm_kin_pvlipSig[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_sl3d"]] = ntupleRawTree.b5_mm_kin_sl3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_slxy"]] = ntupleRawTree.b5_mm_kin_slxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_tau"]] = ntupleRawTree.b5_mm_kin_tau[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_taue"]] = ntupleRawTree.b5_mm_kin_taue[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_tauxy"]] = ntupleRawTree.b5_mm_kin_tauxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_tauxye"]] = ntupleRawTree.b5_mm_kin_tauxye[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_chi2dof"]] = ntupleRawTree.b5_mm_kin_vtx_chi2dof[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_prob"]] = ntupleRawTree.b5_mm_kin_vtx_prob[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_x"]] = ntupleRawTree.b5_mm_kin_vtx_x[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_xErr"]] = ntupleRawTree.b5_mm_kin_vtx_xErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_y"]] = ntupleRawTree.b5_mm_kin_vtx_y[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_yErr"]] = ntupleRawTree.b5_mm_kin_vtx_yErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_z"]] = ntupleRawTree.b5_mm_kin_vtx_z[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_vtx_zErr"]] = ntupleRawTree.b5_mm_kin_vtx_zErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_alpha"]] = ntupleRawTree.b5_mm_kinpc_alpha[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_eta"]] = ntupleRawTree.b5_mm_kinpc_eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_l3d"]] = ntupleRawTree.b5_mm_kinpc_l3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_lxy"]] = ntupleRawTree.b5_mm_kinpc_lxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_mass"]] = ntupleRawTree.b5_mm_kinpc_mass[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_massErr"]] = ntupleRawTree.b5_mm_kinpc_massErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_phi"]] = ntupleRawTree.b5_mm_kinpc_phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pt"]] = ntupleRawTree.b5_mm_kinpc_pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv2ip"]] = ntupleRawTree.b5_mm_kinpc_pv2ip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv2ipErr"]] = ntupleRawTree.b5_mm_kinpc_pv2ipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv2lip"]] = ntupleRawTree.b5_mm_kinpc_pv2lip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv2lipErr"]] = ntupleRawTree.b5_mm_kinpc_pv2lipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv2lipSig"]] = ntupleRawTree.b5_mm_kinpc_pv2lipSig[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv_z"]] = ntupleRawTree.b5_mm_kinpc_pv_z[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pv_zErr"]] = ntupleRawTree.b5_mm_kinpc_pv_zErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pvip"]] = ntupleRawTree.b5_mm_kinpc_pvip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pvipErr"]] = ntupleRawTree.b5_mm_kinpc_pvipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pvlip"]] = ntupleRawTree.b5_mm_kinpc_pvlip[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pvlipErr"]] = ntupleRawTree.b5_mm_kinpc_pvlipErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_pvlipSig"]] = ntupleRawTree.b5_mm_kinpc_pvlipSig[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_sl3d"]] = ntupleRawTree.b5_mm_kinpc_sl3d[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_slxy"]] = ntupleRawTree.b5_mm_kinpc_slxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_tau"]] = ntupleRawTree.b5_mm_kinpc_tau[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_taue"]] = ntupleRawTree.b5_mm_kinpc_taue[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_tauxy"]] = ntupleRawTree.b5_mm_kinpc_tauxy[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_tauxye"]] = ntupleRawTree.b5_mm_kinpc_tauxye[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_chi2dof"]] = ntupleRawTree.b5_mm_kinpc_vtx_chi2dof[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_prob"]] = ntupleRawTree.b5_mm_kinpc_vtx_prob[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_x"]] = ntupleRawTree.b5_mm_kinpc_vtx_x[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_xErr"]] = ntupleRawTree.b5_mm_kinpc_vtx_xErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_y"]] = ntupleRawTree.b5_mm_kinpc_vtx_y[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_yErr"]] = ntupleRawTree.b5_mm_kinpc_vtx_yErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_z"]] = ntupleRawTree.b5_mm_kinpc_vtx_z[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_vtx_zErr"]] = ntupleRawTree.b5_mm_kinpc_vtx_zErr[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_m1iso"]] = ntupleRawTree.b5_mm_m1iso[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_m2iso"]] = ntupleRawTree.b5_mm_m2iso[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mass"]] = ntupleRawTree.b5_mm_mass[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu1_eta"]] = ntupleRawTree.b5_mm_mu1_eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu1_phi"]] = ntupleRawTree.b5_mm_mu1_phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu1_pt"]] = ntupleRawTree.b5_mm_mu1_pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu2_eta"]] = ntupleRawTree.b5_mm_mu2_eta[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu2_phi"]] = ntupleRawTree.b5_mm_mu2_phi[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu2_pt"]] = ntupleRawTree.b5_mm_mu2_pt[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mva"]] = ntupleRawTree.b5_mm_mva[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_otherVtxMaxProb"]] = ntupleRawTree.b5_mm_otherVtxMaxProb[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_otherVtxMaxProb1"]] = ntupleRawTree.b5_mm_otherVtxMaxProb1[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_otherVtxMaxProb2"]] = ntupleRawTree.b5_mm_otherVtxMaxProb2[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_closetrk"]] = ntupleRawTree.b5_mm_closetrk[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_closetrks1"]] = ntupleRawTree.b5_mm_closetrks1[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_closetrks2"]] = ntupleRawTree.b5_mm_closetrks2[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_closetrks3"]] = ntupleRawTree.b5_mm_closetrks3[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kal_valid"]] = ntupleRawTree.b5_mm_kal_valid[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kin_valid"]] = ntupleRawTree.b5_mm_kin_valid[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_kinpc_valid"]] = ntupleRawTree.b5_mm_kinpc_valid[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu1_index"]] = ntupleRawTree.b5_mm_mu1_index[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu1_pdgId"]] = ntupleRawTree.b5_mm_mu1_pdgId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu2_index"]] = ntupleRawTree.b5_mm_mu2_index[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_mu2_pdgId"]] = ntupleRawTree.b5_mm_mu2_pdgId[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_nBMTrks"]] = ntupleRawTree.b5_mm_nBMTrks[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_nDisTrks"]] = ntupleRawTree.b5_mm_nDisTrks[candIdx] ; 
	storageArray[ offset + candidateMap["b5_mm_nTrks"]] = ntupleRawTree.b5_mm_nTrks[candIdx] ; 
